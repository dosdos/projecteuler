'''
Highly divisible triangular number

The sequence of triangle numbers is generated by adding the natural numbers.
So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?

@author: Dos
'''
import unittest


class TriangularNumbers(object):

    def factors(self, n):
        factors = []
        for i in range(1, int(n / 2) + 2):
            if n % i == 0:
                factors.append(i)
        if n != 1: factors.append(n)
        return factors

    def num_offactors(self, n):
        return len(self.factors(n))

    def solve(self):

        found = False
        triangular = 1
        n = 2

        while not found:
            triangular += n
            n += 1

            print(n, triangular, self.num_offactors(triangular))
            if self.num_offactors(triangular) >= 500:
                found = True


class TestTriangularNumbers(unittest.TestCase):
    def setUp(self):
        self.tri = TriangularNumbers()

    def test_get_factors(self):
        self.assertEqual(self.tri.factors(1), [1])
        self.assertEqual(self.tri.factors(3), [1, 3])
        self.assertEqual(self.tri.factors(6), [1, 2, 3, 6])
        self.assertEqual(self.tri.factors(10), [1, 2, 5, 10])
        self.assertEqual(self.tri.factors(15), [1, 3, 5, 15])
        self.assertEqual(self.tri.factors(21), [1, 3, 7, 21])
        self.assertEqual(self.tri.factors(28), [1, 2, 4, 7, 14, 28])

    def test_num_of_factors(self):
        self.assertEqual(self.tri.num_offactors(1), 1)
        self.assertEqual(self.tri.num_offactors(3), 2)
        self.assertEqual(self.tri.num_offactors(6), 4)
        self.assertEqual(self.tri.num_offactors(10), 4)
        self.assertEqual(self.tri.num_offactors(15), 4)
        self.assertEqual(self.tri.num_offactors(21), 4)
        self.assertEqual(self.tri.num_offactors(28), 6)

    def test_solve(self):
        self.tri.solve()

if __name__ == '__main__':
    unittest.main()
